#!/usr/bin/env node
'use strict';

var _promise = require('simple-git/promise');

var _promise2 = _interopRequireDefault(_promise);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _utils = require('./utils');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const run = async (issueTag, issueName, options) => {
  const spinner = (0, _ora2.default)();

  if (!Number.isInteger(parseInt(issueTag))) {
    return spinner.fail('First parameter (issue tag) must be a number');
  }

  if (await (0, _utils.searchIssueTagBranch)(issueTag)) {
    return spinner.fail('An issue with the same tag already started');
  }

  if (!issueName) {
    return spinner.fail('You must provide an issue name');
  }

  if ((await (0, _promise2.default)().status()).files.length > 0) {
    return spinner.fail('Work in progress save or stash it before starting a new issue');
  }

  if (options.find(word => word === '--from-current' || word === '--fc')) {
    spinner.info('Starting from current branch');
  } else {
    spinner.info(`Starting from ${_config2.default.mainBranch} (provide "--from-current" or "--fc" to start from current branch)`);
    spinner.start(`Updating ${_config2.default.mainBranch}`);
    await (0, _promise2.default)().checkout(_config2.default.mainBranch);
    await (0, _promise2.default)().pull();
    spinner.succeed(`${_config2.default.mainBranch} updated`);
  }

  spinner.start('Creating branch');
  await (0, _promise2.default)().checkoutLocalBranch(`${_config2.default.prefix}${issueTag}${_config2.default.branchSeparator}${issueName}`);
  spinner.succeed('Branch created');
};

const words = process.argv.slice(2);

const options = words.filter(word => word.startsWith('--'));
const message = words.filter(word => !word.startsWith('--'));

// eslint-disable-next-line no-console
run(message.shift(), message.join(_config2.default.branchSeparator).toLowerCase(), options).catch(e => console.error(e));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdGFydC5qcyJdLCJuYW1lcyI6WyJydW4iLCJpc3N1ZVRhZyIsImlzc3VlTmFtZSIsIm9wdGlvbnMiLCJzcGlubmVyIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwicGFyc2VJbnQiLCJmYWlsIiwic3RhdHVzIiwiZmlsZXMiLCJsZW5ndGgiLCJmaW5kIiwid29yZCIsImluZm8iLCJjb25maWciLCJtYWluQnJhbmNoIiwic3RhcnQiLCJjaGVja291dCIsInB1bGwiLCJzdWNjZWVkIiwiY2hlY2tvdXRMb2NhbEJyYW5jaCIsInByZWZpeCIsImJyYW5jaFNlcGFyYXRvciIsIndvcmRzIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsImZpbHRlciIsInN0YXJ0c1dpdGgiLCJtZXNzYWdlIiwic2hpZnQiLCJqb2luIiwidG9Mb3dlckNhc2UiLCJjYXRjaCIsImUiLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxNQUFNLE9BQU9DLFFBQVAsRUFBaUJDLFNBQWpCLEVBQTRCQyxPQUE1QixLQUF3QztBQUNsRCxRQUFNQyxVQUFVLG9CQUFoQjs7QUFFQSxNQUFJLENBQUNDLE9BQU9DLFNBQVAsQ0FBaUJDLFNBQVNOLFFBQVQsQ0FBakIsQ0FBTCxFQUEyQztBQUN6QyxXQUFPRyxRQUFRSSxJQUFSLENBQWEsOENBQWIsQ0FBUDtBQUNEOztBQUVELE1BQUksTUFBTSxpQ0FBcUJQLFFBQXJCLENBQVYsRUFBMEM7QUFDeEMsV0FBT0csUUFBUUksSUFBUixDQUFhLDRDQUFiLENBQVA7QUFDRDs7QUFFRCxNQUFJLENBQUNOLFNBQUwsRUFBZ0I7QUFDZCxXQUFPRSxRQUFRSSxJQUFSLENBQWEsZ0NBQWIsQ0FBUDtBQUNEOztBQUVELE1BQUksQ0FBQyxNQUFNLHlCQUFNQyxNQUFOLEVBQVAsRUFBdUJDLEtBQXZCLENBQTZCQyxNQUE3QixHQUFzQyxDQUExQyxFQUE2QztBQUMzQyxXQUFPUCxRQUFRSSxJQUFSLENBQWEsK0RBQWIsQ0FBUDtBQUNEOztBQUVELE1BQUlMLFFBQVFTLElBQVIsQ0FBYUMsUUFBUUEsU0FBUyxnQkFBVCxJQUE2QkEsU0FBUyxNQUEzRCxDQUFKLEVBQXdFO0FBQ3RFVCxZQUFRVSxJQUFSLENBQWEsOEJBQWI7QUFDRCxHQUZELE1BRU87QUFDTFYsWUFBUVUsSUFBUixDQUFjLGlCQUFnQkMsaUJBQU9DLFVBQVcsb0VBQWhEO0FBQ0FaLFlBQVFhLEtBQVIsQ0FBZSxZQUFXRixpQkFBT0MsVUFBVyxFQUE1QztBQUNBLFVBQU0seUJBQU1FLFFBQU4sQ0FBZUgsaUJBQU9DLFVBQXRCLENBQU47QUFDQSxVQUFNLHlCQUFNRyxJQUFOLEVBQU47QUFDQWYsWUFBUWdCLE9BQVIsQ0FBaUIsR0FBRUwsaUJBQU9DLFVBQVcsVUFBckM7QUFDRDs7QUFFRFosVUFBUWEsS0FBUixDQUFjLGlCQUFkO0FBQ0EsUUFBTSx5QkFBTUksbUJBQU4sQ0FBMkIsR0FBRU4saUJBQU9PLE1BQU8sR0FBRXJCLFFBQVMsR0FBRWMsaUJBQU9RLGVBQWdCLEdBQUVyQixTQUFVLEVBQTNGLENBQU47QUFDQUUsVUFBUWdCLE9BQVIsQ0FBZ0IsZ0JBQWhCO0FBQ0QsQ0FoQ0Q7O0FBa0NBLE1BQU1JLFFBQVFDLFFBQVFDLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFkOztBQUVBLE1BQU14QixVQUFVcUIsTUFBTUksTUFBTixDQUFhZixRQUFRQSxLQUFLZ0IsVUFBTCxDQUFnQixJQUFoQixDQUFyQixDQUFoQjtBQUNBLE1BQU1DLFVBQVVOLE1BQU1JLE1BQU4sQ0FBYWYsUUFBUSxDQUFDQSxLQUFLZ0IsVUFBTCxDQUFnQixJQUFoQixDQUF0QixDQUFoQjs7QUFFQTtBQUNBN0IsSUFBSThCLFFBQVFDLEtBQVIsRUFBSixFQUFxQkQsUUFBUUUsSUFBUixDQUFhakIsaUJBQU9RLGVBQXBCLEVBQXFDVSxXQUFyQyxFQUFyQixFQUF5RTlCLE9BQXpFLEVBQWtGK0IsS0FBbEYsQ0FBd0ZDLEtBQUtDLFFBQVFDLEtBQVIsQ0FBY0YsQ0FBZCxDQUE3RiIsImZpbGUiOiJzdGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgZ2l0IGZyb20gJ3NpbXBsZS1naXQvcHJvbWlzZSdcbmltcG9ydCBvcmEgZnJvbSAnb3JhJ1xuaW1wb3J0IHsgc2VhcmNoSXNzdWVUYWdCcmFuY2ggfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgcnVuID0gYXN5bmMgKGlzc3VlVGFnLCBpc3N1ZU5hbWUsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc3Bpbm5lciA9IG9yYSgpXG5cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHBhcnNlSW50KGlzc3VlVGFnKSkpIHtcbiAgICByZXR1cm4gc3Bpbm5lci5mYWlsKCdGaXJzdCBwYXJhbWV0ZXIgKGlzc3VlIHRhZykgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoYXdhaXQgc2VhcmNoSXNzdWVUYWdCcmFuY2goaXNzdWVUYWcpKSB7XG4gICAgcmV0dXJuIHNwaW5uZXIuZmFpbCgnQW4gaXNzdWUgd2l0aCB0aGUgc2FtZSB0YWcgYWxyZWFkeSBzdGFydGVkJylcbiAgfVxuXG4gIGlmICghaXNzdWVOYW1lKSB7XG4gICAgcmV0dXJuIHNwaW5uZXIuZmFpbCgnWW91IG11c3QgcHJvdmlkZSBhbiBpc3N1ZSBuYW1lJylcbiAgfVxuXG4gIGlmICgoYXdhaXQgZ2l0KCkuc3RhdHVzKCkpLmZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gc3Bpbm5lci5mYWlsKCdXb3JrIGluIHByb2dyZXNzIHNhdmUgb3Igc3Rhc2ggaXQgYmVmb3JlIHN0YXJ0aW5nIGEgbmV3IGlzc3VlJylcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZpbmQod29yZCA9PiB3b3JkID09PSAnLS1mcm9tLWN1cnJlbnQnIHx8IHdvcmQgPT09ICctLWZjJykpIHtcbiAgICBzcGlubmVyLmluZm8oJ1N0YXJ0aW5nIGZyb20gY3VycmVudCBicmFuY2gnKVxuICB9IGVsc2Uge1xuICAgIHNwaW5uZXIuaW5mbyhgU3RhcnRpbmcgZnJvbSAke2NvbmZpZy5tYWluQnJhbmNofSAocHJvdmlkZSBcIi0tZnJvbS1jdXJyZW50XCIgb3IgXCItLWZjXCIgdG8gc3RhcnQgZnJvbSBjdXJyZW50IGJyYW5jaClgKVxuICAgIHNwaW5uZXIuc3RhcnQoYFVwZGF0aW5nICR7Y29uZmlnLm1haW5CcmFuY2h9YClcbiAgICBhd2FpdCBnaXQoKS5jaGVja291dChjb25maWcubWFpbkJyYW5jaClcbiAgICBhd2FpdCBnaXQoKS5wdWxsKClcbiAgICBzcGlubmVyLnN1Y2NlZWQoYCR7Y29uZmlnLm1haW5CcmFuY2h9IHVwZGF0ZWRgKVxuICB9XG5cbiAgc3Bpbm5lci5zdGFydCgnQ3JlYXRpbmcgYnJhbmNoJylcbiAgYXdhaXQgZ2l0KCkuY2hlY2tvdXRMb2NhbEJyYW5jaChgJHtjb25maWcucHJlZml4fSR7aXNzdWVUYWd9JHtjb25maWcuYnJhbmNoU2VwYXJhdG9yfSR7aXNzdWVOYW1lfWApXG4gIHNwaW5uZXIuc3VjY2VlZCgnQnJhbmNoIGNyZWF0ZWQnKVxufVxuXG5jb25zdCB3b3JkcyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKVxuXG5jb25zdCBvcHRpb25zID0gd29yZHMuZmlsdGVyKHdvcmQgPT4gd29yZC5zdGFydHNXaXRoKCctLScpKVxuY29uc3QgbWVzc2FnZSA9IHdvcmRzLmZpbHRlcih3b3JkID0+ICF3b3JkLnN0YXJ0c1dpdGgoJy0tJykpXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5ydW4obWVzc2FnZS5zaGlmdCgpLCBtZXNzYWdlLmpvaW4oY29uZmlnLmJyYW5jaFNlcGFyYXRvcikudG9Mb3dlckNhc2UoKSwgb3B0aW9ucykuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxuIl19